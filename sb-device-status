#!/usr/bin/env bash

PIDFILE="$HOME/.mic-tone-keepalive.pid"
PLAY_CMD="play -nq synth sin 1"

case $BLOCK_BUTTON in
1) wpctl set-mute @DEFAULT_SOURCE@ toggle ;; # Toggle mic mute
3) pwvucontrol ;;
esac

is_teams_sharing() {
	win_id=$(xdotool search --name "Screen is being shared" | head -n1)
	if [ -z "$win_id" ]; then
		shareIcon=""
		dunst &
		if [[ "$TO_NOTIFY" -eq "1" ]]; then
			dunstify "Sharing stopped"
			TO_NOTIFY=0
		fi
	else
		shareIcon="󰈈"
		if [[ "$TO_NOTIFY" -eq "0" ]]; then
			dunstify "Screen share started"
			TO_NOTIFY=1
		fi
		killall dunst
	fi
}

is_tone_running() {
	[ -f "$PIDFILE" ] && kill -0 "$(cat "$PIDFILE")" 2>/dev/null
}

start_tone() {
	if ! is_tone_running; then
		$PLAY_CMD >/dev/null 2>&1 &
		echo $! >"$PIDFILE"
	fi
}

stop_tone() {
	if is_tone_running; then
		kill "$(cat "$PIDFILE")" 2>/dev/null
		rm -f "$PIDFILE"
	fi
}

vol="$(timeout 1 wpctl get-volume @DEFAULT_SOURCE@ 2>/dev/null)"

if wpctl status | grep -q "<"; then
	if [ "$vol" != "${vol%\[MUTED\]}" ]; then
		start_tone
		micIcon="󰍭"
	else
		start_tone
		micIcon="󰍬"
	fi
else
	stop_tone
	micIcon=""
fi

if [[ "$(timeout 1 fuser /dev/video* 2>/dev/null)" != '' ]]; then
	vidIcon="󰕧"
else
	vidIcon=""
fi

# is_teams_sharing

if [[ -n "$vidIcon" && -n "$micIcon" && -n "$shareIcon" ]]; then
	echo "[ $shareIcon ∣ $vidIcon ∣ $micIcon ]"
elif [[ -n "$vidIcon" && -n "$micIcon" ]]; then
	echo "[ $vidIcon ∣ $micIcon ]"
elif [[ -n "$vidIcon" && -n "$shareIcon" ]]; then
	echo "[ $shareIcon ∣ $vidIcon ]"
elif [[ -n "$micIcon" && -n "$shareIcon" ]]; then
	echo "[ $shareIcon ∣ $micIcon ]"
elif [[ -n "$shareIcon" || -n "$micIcon" || -n "$vidIcon" ]]; then
	echo "[ $shareIcon$vidIcon$micIcon ]"
fi
